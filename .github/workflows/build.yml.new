name: Build, Push e Deploy

on:
  push:
    branches:
      - main  # ou a branch que voc√™ deseja monitorar
    tags:
      - 'v*'  # Acionar em tags de vers√£o (v1.0.0, v2.1.3, etc.)
  pull_request:
    branches:
      - main  # Tamb√©m executa em PRs para main

env:
  REGISTRY: docker.io
  IMAGE_NAME: ms-gf-checkout-service-v1

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'
          cache: 'maven'  # Ativa o cache do Maven

      - name: Build with Maven
        run: mvn -B clean package -DskipTests

      - name: Run tests
        run: mvn -B test
        if: ${{ !contains(github.event.head_commit.message, '[skip tests]') }}  # Pula testes se o commit tiver [skip tests]

      # Determina a vers√£o da imagem (tag ou SHA do commit)
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=sha,format=short

      # Scan de seguran√ßa (opcional)
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.meta.outputs.tags }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true  # N√£o falha a build, mas alerta sobre vulnerabilidades

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}  # S√≥ publica se n√£o for PR
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Notify on success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: devops-alerts
          SLACK_COLOR: good
          SLACK_TITLE: "‚úÖ Build e Deploy com sucesso!"
          SLACK_MESSAGE: "A imagem ${{ steps.meta.outputs.tags }} foi publicada com sucesso no Docker Hub."
        continue-on-error: true  # N√£o falha a build se o Slack falhar
        
      - name: Notify on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: devops-alerts
          SLACK_COLOR: danger
          SLACK_TITLE: "‚ùå Falha no Build/Deploy"
          SLACK_MESSAGE: "Ocorreu uma falha no pipeline de CI/CD para o ms-gf-checkout-service-v1."
        continue-on-error: true  # N√£o falha a build se o Slack falhar

  deploy-coolify:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
    
    steps:
      - name: Trigger Coolify Deployment
        run: |
          curl -X POST "${{ secrets.COOLIFY_WEBHOOK }}" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}" \
          -d '{"ref": "${{ github.ref }}"}'
      
      - name: Verify Deployment Status
        run: |
          echo "Verificando status do deploy no Coolify..."
          echo "Deploy iniciado em $(date)"
          echo "Para mais detalhes, acesse o painel do Coolify."
      
      - name: Notify Coolify Deployment
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: devops-alerts
          SLACK_COLOR: good
          SLACK_TITLE: "üöÄ Deploy no Coolify Iniciado"
          SLACK_MESSAGE: "O deploy da imagem ms-gf-checkout-service-v1 foi iniciado no Coolify."
        continue-on-error: true
